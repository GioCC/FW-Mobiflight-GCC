Cooperation offer

Hello,
I tried writing directly to Sebastian some time ago, but I never got a reply, so I thought I would also post on the forum in order to get in contact with him or someone else engaged in development.

I have always liked the power and simplicity of the Mobiflight system, however I have a hard time accepting a few of its limits that, in my opinion, may not be so difficult to overcome. I understand that Sebastian's time is obviously valuable, and the job done so far is great, so I think that just endlessly begging for changes and new features is not fair and it's simply not an option.

I have some experience in cockpit building by developing both hardware and software (which is also may day job, although not in the same field); once I finally got hold of the sources, I had a look at them and decided that maybe I could contribute to obtain a few improvements and extensions.
 
While waiting for a feedback, I already added a few new features to the Arduino code, most of which reguraly requested by users in the forum; however, please be advised that, as of now, nothing is yet tested (I just wanted a proof of concept to see that everything could be implemented and how).

Added features are:
- support for external digital I/O "blocks", accessible through up to 256 "pins" (handled as Buttons and Outputs exactly like on-board pins). I/O blocks are modular; currently implemented are HC165-type inputs, HC595-type outputs, MCP23017/23S17 I/Os, TLC5926/DM13/SM16126 LED drivers, key Matrix
- optimization of Arduino I/O access speed (digitalRead/Write)
- general optimization to remove unneeded memory usage (currently, with all the above features I have under 50% memory occupation on the Mega)
- Analog inputs not implemented yet, but quite doable later

All the modifications maintain the compatibility with current system as far as possible, and to a very high degree; of course the PC application will have to be extended at least to account for the higher number of pins and to implement the "plug-ins" for the I/O module parameter setting. As soon as I'm done with the Arduino code I intend to carry out these modifications too.

My only worry at this point is that I'd like these changes, once proven effective, to become a consistent contribution to the "official" software, rather than a custom-built dead-end fork. It would be great if I could discuss with some mainstream developer the solutions I adopted and make sure that they can nicely fit the existing structure and current development plans.

BTw, as I already wrote to Sebastian, I understand and speak German, but it's quicker for me (and understandable to a larger amount of people) if I write in English. Apart from that, I gladly take replies in German.
